How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Viewing a diff between different versions of a file enables you to see what
    was changed. If you know that a bug was introduced in the newest version,
    using a diff can make it much easier to catch the bug. This is because
    you know that a change shown by the diff causes the bug, so instead of
    searching through all of the code for a bug, you only have to check the
    new code in the diff.

    For example, if I add a bug in the newest version of file and commit it,
    someone else could check the diff between my diff and the one before it
    in order to find possible causes. This can speed up the development
    process.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Having access to the entire history of a project enables you to be more
    efficient because it allows you to break up the history into smaller, more
    manageable chunks. By seeing the entire history of a project, it is easier
    to see how a project got to the current state.

    For example, if I need to see exactly why a function was added to a
    codebase, I could use git to see in which commit that function was added.
    By doing this, I could more efficiently understand the history and context
    of that function.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
Docs does?

    One advantage of using manual commits is that it forces you to be more
    intentional with your work. Committing specific changes makes your work
    more modular and easier to understand. Additionally, manually choosing when
    to commit enables you to find changes more easily, since each commit is
    labeled and sorted in order. This means that projects can be more
    sustainable over time as they become more complex.

    However, one advantage of using automatic saving is that it can be helpful
    in case of a computer crash or another malfunction. If you are only
    manually saving your work, some work might be lost if something goes wrong.
    Automatic saving can also help you be more efficient in the short-term,
    because you do not have to spend time on commit messages.

    Overall, I think that for long-term project sustainability, manual
    commits with descriptive commit messages are the most effective method.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file
separately?

    I think that allowing for committing multiple files at once is useful
    because one feature can often require changes to multiple files. For
    instance, a programmer might want to update both backend and frontend
    code for a new feature, or add functionality and tests in one commit. If
    Git required only committing one file at a time, many projects would have
    much more commits than they do!

    On the other hand, a program like Google Docs might treat each file
    separately for simplicity's sake. Many users would not want to manage
    multiple files simultaneously. Additionally, since Google Docs does not
    use a manual committing system, saving multiple files at once would be
    counter-intuitive.
