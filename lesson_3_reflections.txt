When would you want to use a remote repository rather than keeping all your
work local?

    I think that there are a few main use-cases for a remote repository. The
    first is when working in a team. Using a remote repository is much more
    efficient in this scenario, because it allows multiple team members to
    collaborate at once. A hosting service like GitHub can make this extremely
    easy.

    Another use-case would be to back up a repository. If a computer becomes
    inaccessible or you accidentally deleted a local repository, a remote
    one can help immensely. By having a remote repository, code can be stored
    online instead of exclusively locally. If something does happen to your
    local repository, you can always revert back to the remote one.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Pulling changes manually allows a programmer to be more intentional about
    when they are updating their local repository to match the remote
    repository. For instance, a programmer might not want to pull because they
    aren't confident in the code from the remote repository, and do not want to
    break their own code by pulling.

    Sometimes, pulling can lead to conflicts, which are only able
    to be resolved manually. If Git always stayed up-to-date automatically,
    there might be lots of conflicts that would constantly need to be resolved.
    If a programmer didn't have time to resolve these conflicts, this would
    become an annoyance.

    In summary, Git allows a programmer to decide when to or not to pull. By
    giving programmers this choice, it allows them to be more efficient and
    intentional when pulling from a remote repository.

Describe the differences between forks, clones, and branches. When would you
use one instead of another?

    Forks, clones, and branches each have their own distinct meanings. "Fork"
    is a GitHub-centric term used to describe a copy of an existing repository
    by another user or organization. For example, if I fork someone's
    repository, it gets added to the fork list, and I am given my own copy to
    work on.

    Forks are especially useful when making pull requests. In order to make a
    pull request, a user must have a forked repository to request to merge into
    the main repository.

    A clone is usually used to refer to a local copy of an existing repository.
    Whereas forks represent distinct versions of the same repository, clones
    represent the same exact repositories. Cloning is useful when collaborating
    with others on the same repository, or when opening an existing remote
    repository on a separate computer where a local repository doesn't exist.

    A branch is used to represent a different version of code within one
    repository. Branches can be used when testing and introducing new features.
    A branch can then be merged into `master` to add it as part of the
    project's main current state.

    In summary, forks, clones, and branches each have their own uses. Forks
    are used for creating a separate version of someone else's repository,
    cloning is used for downloading an existing remote repository, and branches
    are independent versions of a project within a repository.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Having a local copy of the last known state of a remote repository is
    useful for when a programmer wants to update his local code to also
    correspond with the remote repository. By pulling the remote repository,
    a programmer can ensure that they are editing the most up-to-date version
    of a project.

    Having a copy of the last known state of the remote repository is also a
    helpful safeguard in case something happens to the remote repository. If
    the hosting service, like GitHub, goes down, or if the remote repository is
    somehow accidentally deleted, it is important to have a local copy to work
    from and re-upload. Mistakes happen, so always having a backup plan is
    important for efficient programming.
