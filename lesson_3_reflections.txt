When would you want to use a remote repository rather than keeping all your
work local?

    I think that there are a few main use-cases for a remote repository. The
    first is when working in a team. Using a remote repository is much more
    efficient in this scenario, because it allows multiple team members to
    collaborate at once. A hosting service like GitHub can make this extremely
    easy.

    Another use-case would be to back up a repository. If a computer becomes
    inaccessible or you accidentally deleted a local repository, a remote
    one can help immensely. By having a remote repository, code can be stored
    online instead of exclusively locally. If something does happen to your
    local repository, you can always revert back to the remote one.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Pulling changes manually allows a programmer to be more intentional about
    when they are updating their local repository to match the remote
    repository. For instance, a programmer might not want to pull because they
    aren't confident in the code from the remote repository, and do not want to
    break their own code by pulling.

    Sometimes, pulling can lead to conflicts, which are only able
    to be resolved manually. If Git always stayed up-to-date automatically,
    there might be lots of conflicts that would constantly need to be resolved.
    If a programmer didn't have time to resolve these conflicts, this would
    become an annoyance.

    In summary, Git allows a programmer to decide when to or not to pull. By
    giving programmers this choice, it allows them to be more efficient and
    intentional when pulling from a remote repository.

Describe the differences between forks, clones, and branches. When would you
use one instead of another?

    Forks, clones, and branches each have their own distinct meanings. "Fork"
    is a GitHub-centric term used to describe a copy of an existing repository
    by another user or organization. For example, if I fork someone's
    repository, it gets added to the fork list, and I am given my own copy to
    work on.

    Forks are especially useful when making pull requests. In order to make a
    pull request, a user must have a forked repository to request to merge into
    the main repository.

    A clone is usually used to refer to a local copy of an existing repository.
    Whereas forks represent distinct versions of the same repository, clones
    represent the same exact repositories. Cloning is useful when collaborating
    with others on the same repository, or when opening an existing remote
    repository on a separate computer where a local repository doesn't exist.

    A branch is used to represent a different version of code within one
    repository. Branches can be used when testing and introducing new features.
    A branch can then be merged into `master` to add it as part of the
    project's main current state.

    In summary, forks, clones, and branches each have their own uses. Forks
    are used for creating a separate version of someone else's repository,
    cloning is used for downloading an existing remote repository, and branches
    are independent versions of a project within a repository.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Having a local copy of the last known state of a remote repository is
    useful for when a programmer wants to update his local code to also
    correspond with the remote repository. By pulling the remote repository,
    a programmer can ensure that they are editing the most up-to-date version
    of a project.

    Having a copy of the last known state of the remote repository is also a
    helpful safeguard in case something happens to the remote repository. If
    the hosting service, like GitHub, goes down, or if the remote repository is
    somehow accidentally deleted, it is important to have a local copy to work
    from and re-upload. Mistakes happen, so always having a backup plan is
    important for efficient programming.

How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

    Git and GitHub are extremely useful tools for managing version control and
    collaboration, so I think that it would be more difficult to collaborate
    without them. However, one possible way programmers could collaborate would
    be to use a simple email mechanism, in which they email each other new
    features and the current state of a project in a `zip` file or another
    archiving format.

    One possible advantage to this would be simplicity. It would be very easy
    to understand this emailing system, instead of having to learn new software
    like Git and GitHub. Since most people understand email, but not all
    understand Git, there would be much less overhead when starting to use this
    system.

    However, I think that there are a lot of disadvantages to a system like
    this. For one, Git's committing and history system make seeing a project's
    changes over time very easy. A long email thread would make this much more
    confusing and less efficient. Additionally, GitHub can streamline
    collaboration given its built-in issue and pull-request features. Using
    these features through basic email would be very challenging. Lastly, Git
    and GitHub are industry-standards, so convincing others to use a new,
    inferior system would likely not make very much sense.

    Based on these reasons, I believe that Git and GitHub are the ideal tools
    for the job, and are currently the most efficient options for version
    control and collaboration today.

When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?

    Making changes and committing in a separate branch is extremely useful,
    because it allows programmers to try new things and test changes without
    jeopardizing `master`. Code on the `master` branch is ideally supposed to
    be perfect, so only properly tested code should be added. This is
    especially important, because future branches will likely branch off of
    `master`, so a problem there causes a domino effect into all other
    future branches. Instead, using a separate feature branch allows
    programmers to take risks and add features without worrying about being
    perfect. In essence, it increases productivity because it doesn't require
    programmers to constantly be careful about what they are committing.

    For example, if I wanted to add a feature to a project, I would make a
    feature branch off of master, and then make my commits there. After
    sufficiently getting feedback and testing my code, I could then merge that
    branch into `master`, adding it to the project's primary codebase.

    This branching system is the backbone of the Git workflow. In order to
    properly use Git and GitHub, a programmer must understand branching and
    merging. These features allow for increased safety, efficiency, and
    productivity when programming.
